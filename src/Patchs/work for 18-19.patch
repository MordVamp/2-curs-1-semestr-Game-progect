Index: src/CardPart/CardPart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CardPart/CardPart.java b/src/CardPart/CardPart.java
--- a/src/CardPart/CardPart.java	
+++ b/src/CardPart/CardPart.java	(date 1732047692582)
@@ -1,15 +1,16 @@
 package CardPart;
 
 import javax.swing.*;
+import javax.swing.border.LineBorder;
 import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseMotionAdapter;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
-
-
 class Card {
     int GlDM;
     int EGlDM;
@@ -37,18 +38,17 @@
 class Player {
     int hp;
     int energy;
-
     List<Card> deck;
     List<Card> hand;
 
     public Player() {
-        this.hp = 1000;
-        this.energy = 3;
+        this.hp = 900;
+        this.energy = Gl.energyglobal;
         this.deck = new ArrayList<>();
         this.hand = new ArrayList<>();
         for (int i = 0; i < Gl.DeckExampel; i++) {
             //  deck.add(new Card("Удар", 5, 0, 1, "attack", 0, 0, "", "/CardPart/resources/ComfyUI_01355_.png"));
-            deck.add(new Card("Перевязка", 0, 10, 1, "heal", 0, 0, "", "/CardPart/resources/bandage.png"));
+            deck.add(new Card("Перевязка", 0, 10, 1, "heal", 0, 0, "", "/CardPart/resources/jar of pills.png"));
             deck.add(new Card("flamethrower", 15, 0, 2, "attack", 0, 0, "", "/CardPart/resources/flamethrower .png"));
             deck.add(new Card("regen crazy", 15, 0, 2, "heal", 0, 0, "insanity", "/CardPart/resources/insanity card1.png"));
             //    deck.add(new Card("заточка посоха и меча +1", 0, 0, 2, "attack", 1, 0, "", "/CardPart/resources/sharpen.png"));
@@ -77,8 +77,7 @@
              else if (card.status.equals("infect")) {
                 Gl.infect = Gl.infect + 3;
                 Gl.Nstatus++;
-            }
-            else if (card.status.equals("infect")) {
+            } else if (card.status.equals("insanity")) {
                 Gl.insanity = Gl.insanity + 3;
                 Gl.Nstatus++;}
             hand.remove(card);
@@ -86,8 +85,6 @@
     }
 }
 
-
-
 class BackgroundPanel extends JPanel {
     private Image backgroundImage;
 
@@ -100,18 +97,56 @@
         super.paintComponent(g);
         g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
     }
-}
+
+    static class MouseTrackerPanel extends JPanel {
+        private Point mousePoint = new Point(0, 0);
+        private Image eyeImage;
+        private int circleRadius = 50; // Radius of the transparent circular area
+
+        public MouseTrackerPanel() {
+            eyeImage = new ImageIcon(getClass().getResource("/CardPart/resources/eye.png")).getImage();
+            addMouseMotionListener(new MouseMotionAdapter() {
+                @Override
+                public void mouseMoved(MouseEvent e) {
+                    mousePoint = e.getPoint();
+                    repaint();
+                }
+            });
+        }
 
+        @Override
+        protected void paintComponent(Graphics g) {
+            super.paintComponent(g);
+
+            // Draw the eye image in the center
+            int centerX = getWidth() / 2;
+            int centerY = getHeight() / 2;
+            int eyeWidth = 200; // Width of the eye image
+            int eyeHeight = 200; // Height of the eye image
+            g.drawImage(eyeImage, centerX - eyeWidth / 2, centerY - eyeHeight / 2, eyeWidth, eyeHeight, this);
+
+            // Draw the transparent circular area
+            Graphics2D g2d = (Graphics2D) g;
+            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
+            g2d.setColor(new Color(255, 255, 255, 128)); // Semi-transparent white
+            g2d.fillOval(centerX - circleRadius, centerY - circleRadius, circleRadius * 2, circleRadius * 2);
 
+            // Draw the red dot within the circular area
+            int dotRadius = 5;
+            int dotX = Math.max(centerX - circleRadius + dotRadius, Math.min(centerX + circleRadius - dotRadius, mousePoint.x));
+            int dotY = Math.max(centerY - circleRadius + dotRadius, Math.min(centerY + circleRadius - dotRadius, mousePoint.y));
+            g.setColor(Color.RED);
+            g.fillOval(dotX - dotRadius, dotY - dotRadius, dotRadius * 2, dotRadius * 2);
+        }
+    }
+}
 
 public class CardPart extends JFrame implements ActionListener {
     private Player player;private JLabel playerEnergy;private JLabel playerInfo;
     private Monster monster;private JPanel monsterPanel;  private JLabel monsterInfo;
-    private JButton endturn;
-    private JPanel cardPanel;
+    private JLabel monsterActionIcon; // New label for monster action
 
-
-    private Random random = new Random();
+    private JButton endturn;private JPanel cardPanel; private Random random = new Random();
 
     public CardPart() {
         player = new Player();
@@ -122,16 +157,25 @@
         setDefaultCloseOperation(EXIT_ON_CLOSE);
         setLayout(new BorderLayout());
 
-        playerInfo = new JLabel("Player HP: " + player.hp);
-        playerEnergy = new JLabel("Player Energy: " + player.energy);
+        ImageIcon originalHpIcon = new ImageIcon(getClass().getResource("/CardPart/resources/HUD/Heart.png"));
+        ImageIcon originalEnergyIcon = new ImageIcon(getClass().getResource("/CardPart/resources/HUD/Heart.png"));
+
+        Image hpImage = originalHpIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
+        Image energyImage = originalEnergyIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
+
+        ImageIcon hpIcon = new ImageIcon(hpImage);
+        ImageIcon energyIcon = new ImageIcon(energyImage);
+
+        playerInfo = createIconLabel(hpIcon, String.valueOf(player.hp));
+        playerEnergy = createIconLabel(energyIcon, String.valueOf(player.energy));
         monsterInfo = new JLabel("Monster HP: " + monster.hp);
+        monsterActionIcon = new JLabel();
         endturn = new JButton("End Turn");
         endturn.addActionListener(this);
-        cardPanel = new JPanel(new GridLayout(1, 0)); // Use GridLayout
-        monsterPanel = new JPanel(new BorderLayout()); // Новая панель для монстра
+        cardPanel = new JPanel(new FlowLayout());
+        monsterPanel = new JPanel(new BorderLayout());
         monsterPanel.setOpaque(false);
-        monsterPanel.setOpaque(false);
-        // Добавляем изображение монстра
+
         ImageIcon monsterIcon = new ImageIcon(getClass().getResource(monster.miPath));
         Image img = monsterIcon.getImage();
         Image scaledImg = img.getScaledInstance(240, 240, Image.SCALE_SMOOTH);
@@ -139,13 +183,18 @@
         JLabel monsterImageLabel = new JLabel(scaledMonsterIcon);
         monsterPanel.add(monsterImageLabel, BorderLayout.CENTER);
 
-        // Добавляем информацию о монстре
         JPanel monsterInfoPanel = new JPanel(new FlowLayout());
         monsterInfoPanel.add(monsterInfo);
+        monsterInfoPanel.add(monsterActionIcon);
         monsterPanel.add(monsterInfoPanel, BorderLayout.SOUTH);
         cardPanel.setOpaque(false);
         JPanel topPanel = new JPanel(new FlowLayout());
         topPanel.setOpaque(false);
+        Color darkRed = new Color(202, 41, 41);
+        playerInfo.setForeground(darkRed);
+        playerEnergy.setForeground(darkRed);
+        monsterInfo.setForeground(darkRed);
+        endturn.setForeground(darkRed);
         topPanel.add(playerEnergy);
         topPanel.add(playerInfo);
         topPanel.add(endturn);
@@ -154,11 +203,16 @@
         backgroundPanel.setLayout(new BorderLayout());
         backgroundPanel.add(topPanel, BorderLayout.NORTH);
         backgroundPanel.add(cardPanel, BorderLayout.SOUTH);
-        backgroundPanel.add(monsterPanel, BorderLayout.EAST); // Добавляем панель монстра справа
+        backgroundPanel.add(monsterPanel, BorderLayout.EAST);
+
+        BackgroundPanel.MouseTrackerPanel mouseTrackerPanel = new BackgroundPanel.MouseTrackerPanel();
+        mouseTrackerPanel.setPreferredSize(new Dimension(200, 200));
+        mouseTrackerPanel.setOpaque(false);
+        backgroundPanel.add(mouseTrackerPanel, BorderLayout.CENTER);
 
         add(backgroundPanel);
-
-        updateDisplay(); // Initial display update
+        player.drawCard();
+        updateDisplay();
     }
 
     @Override
@@ -174,34 +228,59 @@
             player.energy = Gl.energyglobal;
             monsterAttack();
             updateDisplay();
-             if (Gl.insanity > 0){applyInsanityMechanic();}
-
+            if (Gl.insanity > 0) {
+                applyInsanityMechanic();
+            }
         }
     }
 
     private void updateDisplay() {
-        playerInfo.setText("Player HP: " + player.hp);
-        playerEnergy.setText("Player Energy: " + player.energy);
+        ImageIcon originalHpIcon = new ImageIcon(getClass().getResource("/CardPart/resources/HUD/Heart.png"));
+        ImageIcon originalEnergyIcon = new ImageIcon(getClass().getResource("/CardPart/resources/HUD/Heart.png"));
+
+        Image hpImage = originalHpIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
+        Image energyImage = originalEnergyIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
+
+        playerInfo.setIcon(createIconLabel(new ImageIcon(hpImage), String.valueOf(player.hp)).getIcon());
+        playerEnergy.setIcon(createIconLabel(new ImageIcon(getClass().getResource("/CardPart/resources/HUD/Stamina.png")), String.valueOf(player.energy)).getIcon());
         monsterInfo.setText("Monster HP: " + monster.hp);
         cardPanel.removeAll();
 
         for (Card card : player.hand) {
             ImageIcon originalIcon = new ImageIcon(getClass().getResource(card.imagePath));
             Image img = originalIcon.getImage();
-            Image scaledImg = img.getScaledInstance(240, 240, Image.SCALE_SMOOTH);
+            Image scaledImg = img.getScaledInstance(200, 200, Image.SCALE_SMOOTH);
             ImageIcon scaledIcon = new ImageIcon(scaledImg);
             JButton cardButton = new JButton(scaledIcon);
-            cardButton.setPreferredSize(new Dimension(240, 240)); // Set preferred size
-            cardButton.setBorderPainted(false); // Remove border
-            cardButton.setContentAreaFilled(false); // Remove content area
+            cardButton.setPreferredSize(new Dimension(200, 200));
+            Color darkRed = new Color(202, 41, 41);
+            LineBorder customBorder = new LineBorder(darkRed, 2);
+            cardButton.setBorder(customBorder);
+            cardButton.setContentAreaFilled(false);
             cardButton.addActionListener(new CardActionListener(card));
             cardPanel.add(cardButton);
         }
 
+        if (player.hp <= 0) {
+            JOptionPane.showMessageDialog(this, "You have been defeated!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
+            System.exit(0);
+        } else if (monster.hp <= 0) {
+            JOptionPane.showMessageDialog(this, "You defeated the monster!", "Victory!", JOptionPane.INFORMATION_MESSAGE);
+            System.exit(0);
+        }
         cardPanel.revalidate();
         cardPanel.repaint();
     }
 
+    private JLabel createIconLabel(ImageIcon icon, String text) {
+        JLabel label = new JLabel(icon);
+        label.setHorizontalTextPosition(JLabel.CENTER);
+        label.setVerticalTextPosition(JLabel.CENTER);
+        label.setText(text);
+        label.setForeground(Color.WHITE);
+        label.setFont(new Font("Arial", Font.BOLD, 20));
+        return label;
+    }
 
     private class CardActionListener implements ActionListener {
         private final Card card;
@@ -220,9 +299,16 @@
     private void monsterAttack() {
         if (monster.hp > 0) {
             Action action = monster.actions[new Random().nextInt(monster.actions.length)];
-            if (action.getType().equals("attack")) {
+            String actionType = action.getType();
+            String iconPath = "/CardPart/resources/m" + actionType + ".png"; // Path to the action icon
+            ImageIcon actionIcon = new ImageIcon(getClass().getResource(iconPath));
+            Image img = actionIcon.getImage();
+            Image scaledImg = img.getScaledInstance(50, 50, Image.SCALE_SMOOTH); // Scale the icon
+            ImageIcon scaledActionIcon = new ImageIcon(scaledImg);
+            monsterActionIcon.setIcon(scaledActionIcon); // Update the monster action icon label
+            if (actionType.equals("attack")) {
                 player.hp -= action.getValue() + Gl.EGlDM; // damage
-            } else if (action.getType().equals("heal")) {
+            } else if (actionType.equals("heal")) {
                 monster.hp += action.getValue(); // heal
             }
         }
@@ -241,7 +327,7 @@
         }
     }
 
-    public static void main(String args[]) {
+    public static void main(String[] args) {
         SwingUtilities.invokeLater(() -> {
             CardPart game = new CardPart();
             game.setVisible(true);
